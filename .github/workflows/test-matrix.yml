name: Cross-Platform Test Matrix

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-matrix:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11"]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up R (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y r-base r-base-dev
        sudo R -e "install.packages(c('jsonlite', 'plm', 'lmtest', 'sandwich', 'AER', 'dplyr', 'forecast', 'vars', 'urca', 'tseries', 'nortest', 'car', 'rpart', 'randomForest', 'ggplot2', 'gridExtra', 'tidyr', 'rlang', 'knitr', 'broom'), repos='https://cran.rstudio.com/')"
    
    - name: Set up R (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install r
        R -e "install.packages(c('jsonlite', 'plm', 'lmtest', 'sandwich', 'AER', 'dplyr', 'forecast', 'vars', 'urca', 'tseries', 'nortest', 'car', 'rpart', 'randomForest', 'ggplot2', 'gridExtra', 'tidyr', 'rlang', 'knitr', 'broom'), repos='https://cran.rstudio.com/')"
    
    - name: Set up R (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install r.project -y
        refreshenv
        $env:PATH += ";C:\Program Files\R\R-4.3.0\bin"
        R -e "install.packages(c('jsonlite', 'plm', 'lmtest', 'sandwich', 'AER', 'dplyr', 'forecast', 'vars', 'urca', 'tseries', 'nortest', 'car', 'rpart', 'randomForest', 'ggplot2', 'gridExtra', 'tidyr', 'rlang', 'knitr', 'broom'), repos='https://cran.rstudio.com/')"
      shell: powershell
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev
    
    - name: Verify R installation
      run: |
        R --version
        poetry run python -c "import subprocess; subprocess.run(['R', '--version'], check=True)"
    
    - name: Run linting (Ubuntu only)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        poetry run black --check rmcp tests
        poetry run isort --check-only rmcp tests
        poetry run flake8 rmcp tests
    
    - name: Run unit tests
      run: |
        poetry run pytest tests/unit/ -v --tb=short
    
    - name: Run MCP protocol compliance tests
      run: |
        poetry run pytest tests/integration/test_mcp_protocol_compliance.py -v --tb=short
    
    - name: Run integration tests
      run: |
        poetry run pytest tests/integration/test_mcp_interface.py -v --tb=short
    
    - name: Test RMCP CLI
      run: |
        poetry run rmcp --version
        poetry run rmcp list-capabilities
    
    - name: Test basic tool execution (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        echo '{"jsonrpc":"2.0","id":1,"method":"tools/list","params":{}}' | poetry run rmcp start --quiet | head -20
    
    - name: Test basic tool execution (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        echo '{"jsonrpc":"2.0","id":1,"method":"tools/list","params":{}}' | poetry run rmcp start --quiet
    
    - name: Test package installation
      run: |
        poetry build
        pip install dist/*.whl
        rmcp --version
    
    - name: Run platform-specific tests
      run: |
        poetry run python -c "
        import platform
        import subprocess
        import sys
        print(f'Platform: {platform.system()} {platform.release()}')
        print(f'Python: {sys.version}')
        
        # Test subprocess handling (important for R integration)
        result = subprocess.run(['python', '--version'], capture_output=True, text=True)
        assert result.returncode == 0, 'Subprocess test failed'
        print('✅ Subprocess handling works')
        
        # Test R subprocess specifically
        result = subprocess.run(['R', '--version'], capture_output=True, text=True)
        assert result.returncode == 0, 'R subprocess test failed'
        print('✅ R subprocess works')
        
        print('✅ Platform-specific tests passed')
        "

  # Test Python 3.12 compatibility (Ubuntu only)
  test-python-312:
    name: Test Python 3.12 Compatibility
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Set up R
      run: |
        sudo apt-get update
        sudo apt-get install -y r-base
        sudo R -e "install.packages(c('jsonlite', 'dplyr'), repos='https://cran.rstudio.com/')"
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev
    
    - name: Run basic tests
      run: |
        poetry run pytest tests/unit/core/test_server.py -v
        poetry run pytest tests/integration/test_mcp_protocol_compliance.py::test_mcp_protocol_version_compatibility -v
    
    - name: Test RMCP CLI
      run: |
        poetry run rmcp --version

  # Separate job for Windows-specific R package issues
  windows-r-compatibility:
    name: Windows R Package Compatibility
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install R with more packages
      run: |
        choco install r.project -y
        refreshenv
        $env:PATH += ";C:\Program Files\R\R-4.3.0\bin"
        # Install packages individually to catch issues
        R -e "install.packages('jsonlite', repos='https://cran.rstudio.com/')"
        R -e "install.packages('dplyr', repos='https://cran.rstudio.com/')"
        R -e "install.packages('ggplot2', repos='https://cran.rstudio.com/')"
        R -e "install.packages('broom', repos='https://cran.rstudio.com/')"
      shell: powershell
    
    - name: Install RMCP
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install
    
    - name: Test Windows-specific R integration
      run: |
        poetry run python -c "
        import subprocess
        import json
        import tempfile
        import os
        
        # Test that R can be called from Python on Windows
        result = subprocess.run(['R', '--version'], capture_output=True, text=True, shell=True)
        assert result.returncode == 0, f'R not accessible: {result.stderr}'
        print('✅ R accessible from Python on Windows')
        
        # Test R script execution
        r_script = '''
        data <- list(x=c(1,2,3), y=c(2,4,6))
        result <- cor(data\$x, data\$y)
        cat(result)
        '''
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.R', delete=False) as f:
            f.write(r_script)
            f.flush()
            
            result = subprocess.run(['R', '--slave', '-f', f.name], 
                                  capture_output=True, text=True, shell=True)
            os.unlink(f.name)
            
        assert result.returncode == 0, f'R script execution failed: {result.stderr}'
        assert '1' in result.stdout, 'R correlation calculation failed'
        print('✅ R script execution works on Windows')
        "
      shell: powershell

  # Test MCP protocol on all platforms
  mcp-protocol-cross-platform:
    name: MCP Protocol Test - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Set up R (quick install)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y r-base
        sudo R -e "install.packages(c('jsonlite', 'dplyr'), repos='https://cran.rstudio.com/')"
    
    - name: Set up R (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install r
        R -e "install.packages(c('jsonlite', 'dplyr'), repos='https://cran.rstudio.com/')"
    
    - name: Set up R (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install r.project -y
        refreshenv
        R -e "install.packages(c('jsonlite', 'dplyr'), repos='https://cran.rstudio.com/')"
      shell: powershell
    
    - name: Install RMCP
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install
    
    - name: Test MCP Protocol stdio communication
      run: |
        poetry run python -c "
        import subprocess
        import json
        import sys
        
        # Test MCP initialize message
        init_msg = {
            'jsonrpc': '2.0',
            'id': 1,
            'method': 'initialize',
            'params': {
                'protocolVersion': '2025-06-18',
                'capabilities': {'tools': {}},
                'clientInfo': {'name': 'Test Client', 'version': '1.0.0'}
            }
        }
        
        process = subprocess.Popen([sys.executable, '-m', 'rmcp.cli', 'start'],
                                 stdin=subprocess.PIPE, stdout=subprocess.PIPE, 
                                 stderr=subprocess.PIPE, text=True)
        
        try:
            stdout, stderr = process.communicate(
                input=json.dumps(init_msg) + '\\n', timeout=10)
            
            # Look for JSON response
            for line in stdout.strip().split('\\n'):
                if line.startswith('{\"jsonrpc\"'):
                    response = json.loads(line)
                    assert response['jsonrpc'] == '2.0'
                    assert 'result' in response
                    print(f'✅ MCP protocol works on {sys.platform}')
                    break
            else:
                raise AssertionError(f'No JSON response found. stdout: {stdout}, stderr: {stderr}')
                
        except subprocess.TimeoutExpired:
            process.kill()
            raise AssertionError('MCP server timeout')
        finally:
            if process.poll() is None:
                process.terminate()
        "