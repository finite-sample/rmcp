name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/rmcp-ci

jobs:
  # Fast Python-only validation (no R required)
  python-checks:
    name: Python Linting & Unit Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 click jsonschema pytest pytest-asyncio
        pip install -e .
    
    - name: Run linting
      run: |
        black --check rmcp tests streamlit scripts
        isort --check-only rmcp tests streamlit scripts
        flake8 rmcp tests streamlit scripts
    
    - name: Run Python-only unit tests
      run: |
        # Test CLI basic functionality
        rmcp --version
        rmcp list-capabilities > /dev/null
        
        # Run all unit tests (Python-only, schema validation, etc.)
        pytest tests/unit/ -v --tb=short

  # Build Docker image for R testing
  docker-build:
    name: Build R Testing Environment
    runs-on: ubuntu-latest
    needs: [python-checks]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true
    
    - name: Output image reference
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

  # Comprehensive R testing with real execution (replaces all R-specific jobs)
  r-testing:
    name: R Integration & Workflow Tests
    runs-on: ubuntu-latest
    needs: [python-checks, docker-build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    container:
      image: ${{ needs.docker-build.outputs.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Python environment in container
      run: |
        export PATH="/opt/venv/bin:$PATH"
        pip install -e .
    
    - name: Verify R and Python integration
      run: |
        export PATH="/opt/venv/bin:$PATH"
        python --version
        R --version | head -1
        python -c "from rmcp.r_integration import diagnose_r_installation; import json; print(json.dumps(diagnose_r_installation(), indent=2))"
    
    - name: Run R code style checks
      run: |
        cd rmcp/r_assets
        R -e "
        library(styler)
        files_to_check <- list.files(c('R', 'scripts'), pattern='[.]R\$', recursive=TRUE, full.names=TRUE)
        if (length(files_to_check) > 0) {
          style_results <- styler::style_file(files_to_check, dry='on', include_roxygen_examples = FALSE)
          if (any(style_results\$changed)) {
            cat('❌ R code style issues found\\n')
            quit(status=1)
          } else {
            cat('✅ R code style check passed\\n')
          }
        }
        "
    
    - name: Run smoke tests (basic functionality)
      run: |
        export PATH="/opt/venv/bin:$PATH"
        pytest tests/smoke/ -v --tb=short --cov=rmcp --cov-report=xml
    
    - name: Run protocol tests (MCP protocol validation)
      run: |
        export PATH="/opt/venv/bin:$PATH"
        pytest tests/integration/protocol/ -v --tb=short --cov=rmcp --cov-append
    
    - name: Run integration tests - tools (R tool integration)
      run: |
        export PATH="/opt/venv/bin:$PATH"
        pytest tests/integration/tools/ -v --tb=short --cov=rmcp --cov-append
    
    - name: Run integration tests - transport (HTTP transport)
      run: |
        export PATH="/opt/venv/bin:$PATH"
        pytest tests/integration/transport/ -v --tb=short --cov=rmcp --cov-append
    
    - name: Run integration tests - core (server & registries)
      run: |
        export PATH="/opt/venv/bin:$PATH"
        pytest tests/integration/core/ -v --tb=short --cov=rmcp --cov-append
    
    - name: Run scenario tests (end-to-end user scenarios)
      run: |
        export PATH="/opt/venv/bin:$PATH"
        pytest tests/scenarios/ -v --tb=short --cov=rmcp --cov-append
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: comprehensive
        name: comprehensive-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Test CLI and MCP protocol
      run: |
        export PATH="/opt/venv/bin:$PATH"
        # Verify CLI works with R integration
        rmcp --version
        rmcp list-capabilities
        
        # Test basic MCP protocol with R tools
        echo '{"jsonrpc":"2.0","id":1,"method":"tools/list","params":{}}' | rmcp start --quiet | head -20

  # Cross-platform Python testing (validates Python-only functionality)
  cross-platform:
    name: Cross-platform Python Tests
    runs-on: ${{ matrix.os }}
    needs: [python-checks]
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11"]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev
    
    - name: Test Python imports and basic functionality (no R)
      run: |
        poetry run python -c "from rmcp.core.server import create_server; print('✅ Server creation works')"
        poetry run rmcp --version
        poetry run rmcp list-capabilities
        
        # Run Python-only unit tests
        poetry run pytest tests/unit/ -v --tb=short
