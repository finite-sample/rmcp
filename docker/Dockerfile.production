# Production Multi-Stage Dockerfile for RMCP
# Optimized for minimal image size and fast startup times

# ============================================================================
# STAGE 1: Build Environment (Heavy dependencies, build tools)
# ============================================================================
FROM rocker/r2u:noble AS builder

ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Install build dependencies and system packages
RUN set -eux; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
        python3 python3-pip python3-venv python3-dev \
        build-essential git \
        libcurl4-openssl-dev libssl-dev libxml2-dev \
        ca-certificates wget \
        # Additional build dependencies for compilation
        pkg-config \
        gcc g++ \
        libblas-dev liblapack-dev \
        gfortran; \
    rm -rf /var/lib/apt/lists/*

# Make r2u behavior explicit for scripts
RUN echo "options(bspm.enable=TRUE, bspm.quiet=TRUE)" >> /etc/R/Rprofile.site

# Install R packages (this is the heavy part - cache this layer)
RUN R -q -e "install.packages(c( \
  'jsonlite','plm','lmtest','sandwich','AER','dplyr', \
  'forecast','vars','urca','tseries','nortest','car', \
  'rpart','randomForest','ggplot2','gridExtra','tidyr', \
  'rlang','readxl','openxlsx','base64enc','reshape2','knitr','broom', \
  'MASS','boot','survival','nlme','mgcv','lme4','glmnet', \
  'e1071','caret','nnet','gbm','xgboost','kernlab','cluster', \
  'zoo','xts','TTR','quantmod','data.table','lattice', \
  'corrplot','viridis','RColorBrewer','lavaan' \
))"

# Create Python virtual environment and install dependencies
ENV VENV=/opt/venv
RUN set -eux; \
    python3 -m venv "$VENV"; \
    . "$VENV/bin/activate"; \
    pip install --upgrade pip; \
    pip install --no-cache-dir \
        "fastapi>=0.100.0" \
        "uvicorn>=0.20.0" \
        "sse-starlette>=1.6.0" \
        "httpx>=0.24.0" \
        "click>=8.1.0" \
        "jsonschema>=4.0.0" \
        "pandas>=1.5.0" \
        "openpyxl>=3.0.0" \
        "build>=0.10.0"

# Copy and install RMCP package in build stage
WORKDIR /build
COPY pyproject.toml ./
COPY rmcp/ ./rmcp/
# Create minimal README.md for build (excluded by .dockerignore)
RUN echo "# RMCP Production Build" > README.md
# Build wheel instead of installing directly
RUN . "$VENV/bin/activate" && pip wheel --no-deps . -w /build/wheels/

# ============================================================================
# STAGE 2: Runtime Environment (Minimal dependencies, optimized for size)
# ============================================================================
FROM rocker/r2u:noble AS runtime

ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Install only runtime dependencies (no build tools)
RUN set -eux; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
        # Python runtime (no dev packages)
        python3 python3-venv \
        # Runtime libraries for compiled packages
        libcurl4 libssl3 libxml2 \
        # Essential utilities
        ca-certificates \
        # Runtime math libraries
        libblas3 liblapack3; \
    # Clean up aggressively
    rm -rf /var/lib/apt/lists/* \
           /tmp/* \
           /var/tmp/* \
           /root/.cache

# Copy R packages from builder stage
COPY --from=builder /usr/local/lib/R/site-library /usr/local/lib/R/site-library
COPY --from=builder /etc/R/Rprofile.site /etc/R/Rprofile.site

# Copy Python virtual environment from builder stage
ENV VENV=/opt/venv
COPY --from=builder /opt/venv /opt/venv

# Copy the built wheel from builder stage  
COPY --from=builder /build/wheels/ /tmp/wheels/

# Ensure venv tools are first on PATH
ENV PATH="$VENV/bin:$PATH"

# Install RMCP from pre-built wheel (as root before user switch)
RUN pip install --no-deps /tmp/wheels/*.whl

# Clean up wheels
RUN rm -rf /tmp/wheels/

# Create non-root user for security
RUN groupadd -r rmcp && useradd -r -g rmcp -d /app -s /bin/bash rmcp

# Set up application directory
WORKDIR /app
RUN chown rmcp:rmcp /app

# Switch to non-root user
USER rmcp

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import rmcp; print('RMCP OK')" || exit 1

# Default to stdio mode for MCP protocol
CMD ["rmcp", "start"]

# Metadata
LABEL org.opencontainers.image.title="RMCP (R Model Context Protocol) - Production"
LABEL org.opencontainers.image.description="Statistical analysis server for AI assistants - Production optimized"
LABEL org.opencontainers.image.vendor="RMCP Project"
LABEL org.opencontainers.image.source="https://github.com/user/rmcp"